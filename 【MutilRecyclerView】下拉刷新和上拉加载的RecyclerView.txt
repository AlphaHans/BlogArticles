---
title: 【MutilRecyclerView】下拉刷新和上拉加载的RecyclerView
date: 2016-03-13 17:43
tag: RecyclerView
category: Android进阶
---

<h1>前言</h1>
过去的一周忙得不行呀！ 因为实验室这边事情太多了，招新、项目重构都压在了一起。

之前呢说好会一直学习RxJava的。其实这过去的一周还是有在学习RxJava！ 我越来越感受到它的魅力了。
<!-- more -->
因为目前业务有需求封装一个下拉刷新上拉加载的库，所以用了两天时间，终于写出一个自己比较满意的了~

所以呢 还是先将这个分享出来，等忙完了这段时间，再继续写RxJava那边的学习记录吧！

源代码在末尾有放出。
<h1>MutilRecyclerView</h1>
一个封装了SwipeRefreshLayout、RecyclerView的库。 实现了下拉刷新和上拉加载

<h1>使用：</h1>
目前只能下载zip下来将base包下的两个类取出来~

具体使用方式：
1.创建Adapter并且继承BaseMutilRecycleAdapter<T>
后面可以指定数据泛型（本文采用String作为例子）

```
public class MyAdapter extends BaseMutilRecycleAdapter<String> {
    private LayoutInflater mInflater;

    public MyAdapter(Context context, List<String> names) {
        super(context, names);
        mInflater = LayoutInflater.from(context);
    }

    @Override
    public RecyclerView.ViewHolder getItemViewHolder(ViewGroup parent) { 
        View view = mInflater.inflate(R.layout.item_rv_data, parent, false);
        return new MyViewHolder(view);
    }

    @Override
    public void bindData(RecyclerView.ViewHolder holder, String data) {
        MyViewHolder viewHolder = (MyViewHolder) holder;
        viewHolder.mName.setText(data);
    }

    @Override
    public int getLoadLayoutId() {//这个方法返回最下面等待的布局id
        return R.layout.part_rl_footer;
    }


    public class MyViewHolder extends RecyclerView.ViewHolder {
        private TextView mName;

        public MyViewHolder(View itemView) {
            super(itemView);
            mName = (TextView) itemView.findViewById(R.id.data_tv_name);
        }
    }
}
```
然后在Activity实现MutilRecycleView.MutilRecycleViewListener接口并且实现两个方法：
onRefresh、onLoadMore 前者是 预刷新、和下拉刷新的调用方法（备注：预刷新指的是 第一次进入该页面的时候，出现等待的圈圈，详情结合App就明白了）；后者是上拉加载的调用方法。

```
 //在onCreate中
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mMutilRecycleView = (MutilRecycleView) findViewById(R.id.main_mrc_ll);
        mMutilRecycleView.setMutilRecycleViewListener(this);//实现监听
        mMutilRecycleView.startForeRefreshing();//开始预加载
    }

```
这样子就可以进行回调使用了。


<h1>注意事项的用法</h1>
<h2>1.onRefresh中</h2>
<h3>1.预刷新处理</h3>
一般来说我们进入一个页面的时候，发起网络请求数据都需要有一个ProgressBar来表明目前在获取数据，而SwipeRefreshLayout的用法比较奇特，这个言语说不出来，只能说用过才知道。 
这里进行预刷新的判断标准是Adapter是否为null
```
 if (mAdapter == null) {//进来刷新加载的情况
                                Toast.makeText(MainActivity.this, "页面加载完成", Toast.LENGTH_SHORT).show();
                                mAdapter = new MyAdapter(MainActivity.this, mNames);
                                mMutilRecycleView.setAdapter(mAdapter);
                                mMutilRecycleView.stopForeRefreshing();
 }
```
这里就是表明 第一次进入，然后数据加载完成了。 我们需要调用两个方法：
```
mMutilRecycleView.setAdapter(mAdapter);
mMutilRecycleView.stopForeRefreshing();
```
第一个是进行Adpater的设置，第二个是停止预刷新的方法。
<h3>2.下拉刷新的处理</h3>
当预刷新完成之后我们的Adapter已经创建了，所以刷新的话我们只需要对原有的数据进行更新就可以了。
```
//下拉刷新的情况
Toast.makeText(MainActivity.this, "数据刷新完成", Toast.LENGTH_SHORT).show();
mMutilRecycleView.stopRefreshAndUpdateData(mNames);
```
这里的话，方法需要传入数据的对象（如List等）。 我们都知道要是我们直接调用adapter.notifyDataSetChange并不会立刻刷新数据。而我们将Adapter里面的数据源重新赋予我们穿进去的数据对象的话，再调用notifyDataSetChange就会立刻刷新了。 

<h2>2.onLoadMore中</h2>
一般我们发起网络请求数据都会有三种情况：数据为空、数据量小与我们请求的数据、数据量充裕
<h3>1.数据为空</h3>
例子中我们通过进行一个mEveryNewCount来统计每次新的Api返回的数据量，来判断。
```
 StringBuilder sb = new StringBuilder("上拉加载完成:");
 if (mEveryNewCount == 0) {//没有数据
  mMutilRecycleView.markNoMoreData();//标记没有数据
  sb.append("数据库已经没有数据了");
 } else if (mEveryNewCount < mCount) {//最后一次返回的数据量小与请求的数据量 说明数据量已经不足
  mMutilRecycleView.stopLoadMoreAndUpdateData(mNames);//刷新数据
  mMutilRecycleView.markNoMoreData();//标记没有数据
  sb.append("本次有数据，但数据库已经没有数据了");
 } else {
  mMutilRecycleView.stopLoadMoreAndUpdateData(mNames);//刷新数据
  sb.append("本次有数据，而且数据库仍然有数据");
 }
 Toast.makeText(MainActivity.this, sb.toString(), Toast.LENGTH_SHORT).show();
```
需要特别注意，我们没有数据之后请调用：
```
mMutilRecycleView.markNoMoreData();
```
这样可以保障我们上拉的时候不会再显示出“加载的布局”以及多次请求Api

<h1>自由定制</h1>
本库中使用了两个RecyclerView和SwipeRefreshLayout。
其中RecyclerView因为默认采用LinearLayoutManager，所以为了避免其它Bug，所以对外不暴露RecyclerView获取，但SwipeRefreshLayout是有对外方法暴露的：
```
mMutilRecycleView.getSwipeRefreshLayout();
```
获取返回的SwipeRefreshLayout()。
我们可以修改他的颜色。

```
mSwipeRefreshLayout.setColorSchemeResources(android.R.color.holo_green_dark, android.R.color.holo_blue_dark, android.R.color.holo_orange_dark);

```

<h1>完整例子</h1>
```
public class MainActivity extends Activity implements MutilRecycleView.MutilRecycleViewListener {
    private MutilRecycleView mMutilRecycleView;
    private List<String> mNames;
    private Handler mHandler = new Handler(Looper.getMainLooper());
    private MyAdapter mAdapter;
    //数据获取的基准点
    private int mStart = 0;
    //数据获取的条数
    private int mCount = 8;
    //新数据中的数量
    private int mEveryNewCount = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mMutilRecycleView = (MutilRecycleView) findViewById(R.id.main_mrc_ll);
        mMutilRecycleView.setMutilRecycleViewListener(this);
        mMutilRecycleView.startForeRefreshing();
    }

    @Override
    public void onRefresh() {
        System.out.println("开始刷新");
        mNames = new ArrayList<String>();
        mNames.clear();
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                mStart = 0;
                mNames = Api.getData(mStart, mCount);
                if (mNames != null && mNames.size() != 0) {
                    mHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            if (mAdapter == null) {//进来刷新加载的情况
                                Toast.makeText(MainActivity.this, "页面加载完成", Toast.LENGTH_SHORT).show();
                                mAdapter = new MyAdapter(MainActivity.this, mNames);
                                mMutilRecycleView.setAdapter(mAdapter);
                                mMutilRecycleView.stopForeRefreshing();
                            } else {
                                //下拉刷新的情况
                                Toast.makeText(MainActivity.this, "数据刷新完成", Toast.LENGTH_SHORT).show();
                                mMutilRecycleView.stopRefreshAndUpdateData(mNames);
                            }
                        }
                    });
                }
            }
        }).start();
    }

    @Override
    public void onLoadMore() {
        //Toast.makeText(this, "正在加载", Toast.LENGTH_SHORT).show();
        System.out.println("MainActivity onLoadMore 开始加载");
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if (mNames != null) {
                    mStart += mCount;//开始位置
                    List<String> newList = Api.getData(mStart, mCount);//新的数据列表
                    System.out.println(newList.toString());
                    mEveryNewCount = newList.size();//数据列表的数量
                    mNames.addAll(newList);//加到原有的数据中去
                    //释放数据
                    newList.clear();
                    newList = null;
                }
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        StringBuilder sb = new StringBuilder("上拉加载完成:");
                        if (mEveryNewCount == 0) {//没有数据
                            mMutilRecycleView.markNoMoreData();//标记没有数据
                            sb.append("数据库已经没有数据了");
                        } else if (mEveryNewCount < mCount) {//最后一次返回的数据量小与请求的数据量 说明数据量已经不足
                            mMutilRecycleView.stopLoadMoreAndUpdateData(mNames);//刷新数据
                            mMutilRecycleView.markNoMoreData();//标记没有数据
                            sb.append("本次有数据，但数据库已经没有数据了");
                        } else {
                            mMutilRecycleView.stopLoadMoreAndUpdateData(mNames);//刷新数据
                            sb.append("本次有数据，而且数据库仍然有数据");
                        }
                        Toast.makeText(MainActivity.this, sb.toString(), Toast.LENGTH_SHORT).show();
                    }
                });
            }
        }).start();
    }
}
```

<h1>源代码</h1>
github地址：https://github.com/AlphaHans/MutilRecyclerView/

**-Hans 2016.3.13 17:43**